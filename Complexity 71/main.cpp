#include "SequenceGenerator.h"
#include <iostream>
#include <vector>
#include "ComplexityToDebruijn.h"
#include <fstream>

using namespace std;


int main(){
    cout << "Starting..." << endl;
    for(int c = 38; c < 64; c++){
        std::ofstream out("order_6_complexity_"+ to_string(c) +".txt");
        std::streambuf *coutbuf = std::cout.rdbuf(); //save old buf
        std::cout.rdbuf(out.rdbuf()); //redirect std::cout to out.txt!
        time_t start, end;
        time(&start);
        int order = 6, complexity = c;
        ComplexityToDebruijn C(complexity,order);
        SequenceGenerator seq(complexity - pow(2,order - 1));
        auto s = seq.getSequences();
        /*TODO:
        * automate the complexity choosing
        * remove rotations from sub sequences
        */
        s = C.removeRotations(s);
        cout << "For order "<< order << " complexity "<< complexity<< ":" << endl;
        for (const auto& i : s) {
            cout <<"Debruijn Sequences generated by the sub sequence "<< i << " : " << endl;
            string x = i+i;
            if (i.length() == 8){
                x += i+i;
            }
            int seq_num = C.fromSubseqToDebruijn(x);
            cout << "the number of Debruijn sequences: " << seq_num << endl << endl;
        }
        cout << "number of subsequences with complexity " << complexity - pow(2,order - 1)<< " is: " << seq.getNumOfSeq() << endl;

        time(&end);

        cout << "overall execution time is " << end - start << " seconds" << endl;
        std::cout.rdbuf(coutbuf); //reset to standard output again
        cout << "Done with "  << complexity << endl;
    }
    cout << "Done with all complexities!!!" << endl;
}