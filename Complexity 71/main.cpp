#include "SequenceGenerator.h"
#include <iostream>
#include <vector>
#include "ComplexityToDebruijn.h"
#include <fstream>
#include <chrono>
using namespace std::chrono;
using namespace std;

int main(){
    cout << "Starting..." << endl;
    int order = 6;
    for(int c = 38; c < 47; c++){
        std::ofstream out("order_"+ to_string(order)+"_complexity_"+ to_string(c) +".txt");
        std::streambuf *coutbuf = std::cout.rdbuf(); //save old buf
        std::cout.rdbuf(out.rdbuf()); //redirect std::cout to out.txt!

        auto start = high_resolution_clock::now();

        int complexity = c;
        ll total =0;
        ComplexityToDebruijn C(complexity,order);
        SequenceGenerator seq(complexity - pow(2,order - 1));
        auto s = seq.getSequences();
        /*TODO:
        * automate the complexity choosing
        * remove rotations from sub sequences
        */
        s = C.removeRotations(s);
        cout << "For order "<< order << " complexity "<< complexity<< ":" << endl;
        for (const auto& i : s) {
            cout <<"Debruijn Sequences generated by the sub sequence "<< i << " : " << endl;
            string x = i+i;
            if(i.size() == 8){
                x += i+i;
            }
            int seq_num = C.fromSubseqToDebruijn(x);
            cout << "the number of Debruijn sequences: "   << seq_num << endl << endl;
            total+= seq_num;
        }
        cout << "number of subsequences with complexity " << complexity - pow(2,order - 1)<< " is: " << seq.getNumOfSeq() << endl;
        cout << "total number of sequences of complexity " << c << " is: " << total << endl;

        auto end = high_resolution_clock::now();
        auto duration= duration_cast<minutes>(end - start);

        if(duration.count() < 1)
            cout << "overall execution time is " << duration_cast<seconds>(end - start).count() << " seconds" << endl;
        else if(duration.count() > 60)
            cout << "overall execution time is " << duration_cast<hours>(end - start).count() << " hours" << endl;
        else
            cout << "overall execution time is " << duration.count() << " minutes" << endl;

        /*************************************** reset cout buff*****************************************************/
        std::cout.rdbuf(coutbuf); //reset to standard output again
        cout << "total number of sequences of complexity " << c << " is: " << total << endl;
        if(duration.count() < 1)
            cout << "overall execution time is " << duration_cast<seconds>(end - start).count() << " seconds" << endl;
        else if(duration.count() > 60)
            cout << "overall execution time is " << duration_cast<hours>(end - start).count() << " hours" << endl;
        else
            cout << "overall execution time is " << duration.count() << " minutes" << endl;

        cout <<  endl;
    }
    cout << "Done with all complexities!!!" << endl;
}